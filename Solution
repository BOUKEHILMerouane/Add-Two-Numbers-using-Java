/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int sum = 0, scr = 0;
        ListNode res = null, start=null, pointer=null;

        while (l1 != null || l2 != null) {

            if (l1 != null && l2 != null) {
                sum = l1.val + l2.val + scr;
                scr = sum / 10;

                res = new ListNode(sum % 10, null);
                if (start == null){
                    start = res;
                    pointer = start;
                }
                else{
                    pointer.next = res;
                    pointer = res;
                }

            }

            else if (l1 == null) {
                sum = l2.val + scr;
                scr = sum / 10;

                res = new ListNode(sum % 10, null);
                if (start == null){
                    start = res;
                    pointer = start;
                }
                else{
                    pointer.next = res;
                    pointer = res;
                }
            }

            else if (l2 == null) {
                sum = l1.val + scr;
                scr = sum / 10;

                res = new ListNode(sum % 10, null);
                if (start == null){
                    start = res;
                    pointer = start;
                }
                else{
                    pointer.next = res;
                    pointer = res;
                }

            }
            

            if (l1 != null) {
                l1 = l1.next;
            }
            if (l2 != null) {
                l2 = l2.next;
            }

            

        }

        if (l1 == null && l2 == null && scr!=0) {
            res = new ListNode(scr, null);
            pointer.next = res;
            pointer = res;
        }

        

        return start;

    }
}
